{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Helper function to load cart from localStorage\nconst loadFromLocalStorage = () => {\n  try {\n    const savedCart = localStorage.getItem('cart');\n    const parsedCart = savedCart ? JSON.parse(savedCart) : {\n      items: [],\n      totalPrice: 0\n    };\n\n    // Ensure the totalPrice is a number (parse it if necessary)\n    if (typeof parsedCart.totalPrice === 'string') {\n      parsedCart.totalPrice = parseFloat(parsedCart.totalPrice.replace('$', '').trim()) || 0;\n    }\n\n    // Ensure items is an array\n    if (!Array.isArray(parsedCart.items)) {\n      parsedCart.items = [];\n    }\n    return parsedCart;\n  } catch (error) {\n    console.error('Failed to load cart from localStorage:', error);\n    return {\n      items: [],\n      totalPrice: 0\n    };\n  }\n};\nconst initialCartState = loadFromLocalStorage(); // Load initial state from localStorage\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: initialCartState,\n  reducers: {\n    addToCart: (state, action) => {\n      const existingItem = state.items.find(item => item.id === action.payload.id);\n      if (existingItem) {\n        existingItem.quantity += 1;\n      } else {\n        state.items.push({\n          ...action.payload,\n          quantity: 1\n        });\n      }\n      state.totalPrice = parseFloat(state.totalPrice) + parseFloat(action.payload.price); // Ensure it's a number\n    },\n    removeFromCart: (state, action) => {\n      const item = state.items.find(item => item.id === action.payload.id);\n      if (item) {\n        state.totalPrice = parseFloat(state.totalPrice) - parseFloat(item.price) * item.quantity;\n        state.items = state.items.filter(item => item.id !== action.payload.id);\n      }\n    },\n    incrementQuantity: (state, action) => {\n      const item = state.items.find(item => item.id === action.payload.id);\n      if (item) {\n        item.quantity += 1;\n        state.totalPrice = parseFloat(state.totalPrice) + parseFloat(item.price);\n      }\n    },\n    decrementQuantity: (state, action) => {\n      const item = state.items.find(item => item.id === action.payload.id);\n      if (item && item.quantity > 1) {\n        item.quantity -= 1;\n        state.totalPrice = parseFloat(state.totalPrice) - parseFloat(item.price);\n      }\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  incrementQuantity,\n  decrementQuantity\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","loadFromLocalStorage","savedCart","localStorage","getItem","parsedCart","JSON","parse","items","totalPrice","parseFloat","replace","trim","Array","isArray","error","console","initialCartState","cartSlice","name","initialState","reducers","addToCart","state","action","existingItem","find","item","id","payload","quantity","push","price","removeFromCart","filter","incrementQuantity","decrementQuantity","actions","reducer"],"sources":["C:/Users/Lenovo/Desktop/ReactProject/project/src/redux/cartSlice.jsx"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n// Helper function to load cart from localStorage\r\nconst loadFromLocalStorage = () => {\r\n  try {\r\n    const savedCart = localStorage.getItem('cart');\r\n    const parsedCart = savedCart ? JSON.parse(savedCart) : { items: [], totalPrice: 0 };\r\n\r\n    // Ensure the totalPrice is a number (parse it if necessary)\r\n    if (typeof parsedCart.totalPrice === 'string') {\r\n      parsedCart.totalPrice = parseFloat(parsedCart.totalPrice.replace('$', '').trim()) || 0;\r\n    }\r\n\r\n    // Ensure items is an array\r\n    if (!Array.isArray(parsedCart.items)) {\r\n      parsedCart.items = [];\r\n    }\r\n\r\n    return parsedCart;\r\n  } catch (error) {\r\n    console.error('Failed to load cart from localStorage:', error);\r\n    return { items: [], totalPrice: 0 };\r\n  }\r\n};\r\n\r\nconst initialCartState = loadFromLocalStorage(); // Load initial state from localStorage\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState: initialCartState,\r\n  reducers: {\r\n    addToCart: (state, action) => {\r\n      const existingItem = state.items.find((item) => item.id === action.payload.id);\r\n      if (existingItem) {\r\n        existingItem.quantity += 1;\r\n      } else {\r\n        state.items.push({ ...action.payload, quantity: 1 });\r\n      }\r\n      state.totalPrice = parseFloat(state.totalPrice) + parseFloat(action.payload.price); // Ensure it's a number\r\n    },\r\n    removeFromCart: (state, action) => {\r\n      const item = state.items.find((item) => item.id === action.payload.id);\r\n      if (item) {\r\n        state.totalPrice = parseFloat(state.totalPrice) - parseFloat(item.price) * item.quantity;\r\n        state.items = state.items.filter((item) => item.id !== action.payload.id);\r\n      }\r\n    },\r\n    incrementQuantity: (state, action) => {\r\n      const item = state.items.find((item) => item.id === action.payload.id);\r\n      if (item) {\r\n        item.quantity += 1;\r\n        state.totalPrice = parseFloat(state.totalPrice) + parseFloat(item.price);\r\n      }\r\n    },\r\n    decrementQuantity: (state, action) => {\r\n      const item = state.items.find((item) => item.id === action.payload.id);\r\n      if (item && item.quantity > 1) {\r\n        item.quantity -= 1;\r\n        state.totalPrice = parseFloat(state.totalPrice) - parseFloat(item.price);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addToCart, removeFromCart, incrementQuantity, decrementQuantity } = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EACjC,IAAI;IACF,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC9C,MAAMC,UAAU,GAAGH,SAAS,GAAGI,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC,GAAG;MAAEM,KAAK,EAAE,EAAE;MAAEC,UAAU,EAAE;IAAE,CAAC;;IAEnF;IACA,IAAI,OAAOJ,UAAU,CAACI,UAAU,KAAK,QAAQ,EAAE;MAC7CJ,UAAU,CAACI,UAAU,GAAGC,UAAU,CAACL,UAAU,CAACI,UAAU,CAACE,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACxF;;IAEA;IACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACT,UAAU,CAACG,KAAK,CAAC,EAAE;MACpCH,UAAU,CAACG,KAAK,GAAG,EAAE;IACvB;IAEA,OAAOH,UAAU;EACnB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,OAAO;MAAEP,KAAK,EAAE,EAAE;MAAEC,UAAU,EAAE;IAAE,CAAC;EACrC;AACF,CAAC;AAED,MAAMQ,gBAAgB,GAAGhB,oBAAoB,CAAC,CAAC,CAAC,CAAC;;AAEjD,MAAMiB,SAAS,GAAGlB,WAAW,CAAC;EAC5BmB,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEH,gBAAgB;EAC9BI,QAAQ,EAAE;IACRC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5B,MAAMC,YAAY,GAAGF,KAAK,CAACf,KAAK,CAACkB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MAC9E,IAAIH,YAAY,EAAE;QAChBA,YAAY,CAACK,QAAQ,IAAI,CAAC;MAC5B,CAAC,MAAM;QACLP,KAAK,CAACf,KAAK,CAACuB,IAAI,CAAC;UAAE,GAAGP,MAAM,CAACK,OAAO;UAAEC,QAAQ,EAAE;QAAE,CAAC,CAAC;MACtD;MACAP,KAAK,CAACd,UAAU,GAAGC,UAAU,CAACa,KAAK,CAACd,UAAU,CAAC,GAAGC,UAAU,CAACc,MAAM,CAACK,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC;IACtF,CAAC;IACDC,cAAc,EAAEA,CAACV,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAMG,IAAI,GAAGJ,KAAK,CAACf,KAAK,CAACkB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MACtE,IAAID,IAAI,EAAE;QACRJ,KAAK,CAACd,UAAU,GAAGC,UAAU,CAACa,KAAK,CAACd,UAAU,CAAC,GAAGC,UAAU,CAACiB,IAAI,CAACK,KAAK,CAAC,GAAGL,IAAI,CAACG,QAAQ;QACxFP,KAAK,CAACf,KAAK,GAAGe,KAAK,CAACf,KAAK,CAAC0B,MAAM,CAAEP,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MAC3E;IACF,CAAC;IACDO,iBAAiB,EAAEA,CAACZ,KAAK,EAAEC,MAAM,KAAK;MACpC,MAAMG,IAAI,GAAGJ,KAAK,CAACf,KAAK,CAACkB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MACtE,IAAID,IAAI,EAAE;QACRA,IAAI,CAACG,QAAQ,IAAI,CAAC;QAClBP,KAAK,CAACd,UAAU,GAAGC,UAAU,CAACa,KAAK,CAACd,UAAU,CAAC,GAAGC,UAAU,CAACiB,IAAI,CAACK,KAAK,CAAC;MAC1E;IACF,CAAC;IACDI,iBAAiB,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MACpC,MAAMG,IAAI,GAAGJ,KAAK,CAACf,KAAK,CAACkB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MACtE,IAAID,IAAI,IAAIA,IAAI,CAACG,QAAQ,GAAG,CAAC,EAAE;QAC7BH,IAAI,CAACG,QAAQ,IAAI,CAAC;QAClBP,KAAK,CAACd,UAAU,GAAGC,UAAU,CAACa,KAAK,CAACd,UAAU,CAAC,GAAGC,UAAU,CAACiB,IAAI,CAACK,KAAK,CAAC;MAC1E;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEV,SAAS;EAAEW,cAAc;EAAEE,iBAAiB;EAAEC;AAAkB,CAAC,GAAGlB,SAAS,CAACmB,OAAO;AAEpG,eAAenB,SAAS,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}