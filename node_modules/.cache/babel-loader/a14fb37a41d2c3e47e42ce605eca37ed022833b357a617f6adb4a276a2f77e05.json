{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\n\n// const cartSlice = createSlice({\n//   name: 'cart',\n//   initialState: [],\n//   reducers: {\n//     addToCart: (state, action) => {\n//       const existingItem = state.find(item => item.id === action.payload.id);\n//       if (existingItem) {\n//         existingItem.quantity += 1;\n//       } else {\n//         state.push({ ...action.payload, quantity: 1 });\n//       }\n//     },\n//     removeFromCart: (state, action) => {\n//       return state.filter(item => item.id !== action.payload.id);\n//     },\n//     incrementQuantity: (state, action) => {\n//       const item = state.find(item => item.id === action.payload.id);\n//       if (item) {\n//         item.quantity += 1;\n//       }\n//     },\n//     decrementQuantity: (state, action) => {\n//       const item = state.find(item => item.id === action.payload.id);\n//       if (item && item.quantity > 1) {\n//         item.quantity -= 1;\n//       }\n//     },\n//   },\n// });\n\n// export const { addToCart, removeFromCart, incrementQuantity, decrementQuantity } = cartSlice.actions;\n\n// export default cartSlice.reducer;\n\n// src/redux/cartSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\n\n// Helper functions\nconst loadFromLocalStorage = () => {\n  const savedCart = localStorage.getItem('cart');\n  return savedCart ? JSON.parse(savedCart) : {\n    items: [],\n    totalPrice: 0\n  };\n};\nconst saveToLocalStorage = state => {\n  localStorage.setItem('cart', JSON.stringify(state));\n};\n\n// Initial state with items and totalPrice\nconst initialState = loadFromLocalStorage();\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const existingItem = state.items.find(item => item.id === action.payload.id);\n      if (existingItem) {\n        existingItem.quantity += 1;\n      } else {\n        state.items.push({\n          ...action.payload,\n          quantity: 1\n        });\n      }\n      state.totalPrice += action.payload.price; // Update total price\n      saveToLocalStorage(state); // Save updated state to localStorage\n    },\n    removeFromCart: (state, action) => {\n      const updatedState = state.items.filter(item => item.id !== action.payload.id);\n      state.totalPrice -= action.payload.price * action.payload.quantity; // Adjust the total price\n      state.items = updatedState;\n      saveToLocalStorage(state); // Save updated state to localStorage\n    },\n    incrementQuantity: (state, action) => {\n      const item = state.items.find(item => item.id === action.payload.id);\n      if (item) {\n        item.quantity += 1;\n        state.totalPrice += item.price; // Update total price\n        saveToLocalStorage(state); // Save updated state to localStorage\n      }\n    },\n    decrementQuantity: (state, action) => {\n      const item = state.items.find(item => item.id === action.payload.id);\n      if (item && item.quantity > 1) {\n        item.quantity -= 1;\n        state.totalPrice -= item.price; // Update total price\n        saveToLocalStorage(state); // Save updated state to localStorage\n      }\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  incrementQuantity,\n  decrementQuantity\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","loadFromLocalStorage","savedCart","localStorage","getItem","JSON","parse","items","totalPrice","saveToLocalStorage","state","setItem","stringify","initialState","cartSlice","name","reducers","addToCart","action","existingItem","find","item","id","payload","quantity","push","price","removeFromCart","updatedState","filter","incrementQuantity","decrementQuantity","actions","reducer"],"sources":["C:/Users/Lenovo/Desktop/ReactProject/project/src/redux/cartSlice.jsx"],"sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\r\n\r\n// const cartSlice = createSlice({\r\n//   name: 'cart',\r\n//   initialState: [],\r\n//   reducers: {\r\n//     addToCart: (state, action) => {\r\n//       const existingItem = state.find(item => item.id === action.payload.id);\r\n//       if (existingItem) {\r\n//         existingItem.quantity += 1;\r\n//       } else {\r\n//         state.push({ ...action.payload, quantity: 1 });\r\n//       }\r\n//     },\r\n//     removeFromCart: (state, action) => {\r\n//       return state.filter(item => item.id !== action.payload.id);\r\n//     },\r\n//     incrementQuantity: (state, action) => {\r\n//       const item = state.find(item => item.id === action.payload.id);\r\n//       if (item) {\r\n//         item.quantity += 1;\r\n//       }\r\n//     },\r\n//     decrementQuantity: (state, action) => {\r\n//       const item = state.find(item => item.id === action.payload.id);\r\n//       if (item && item.quantity > 1) {\r\n//         item.quantity -= 1;\r\n//       }\r\n//     },\r\n//   },\r\n// });\r\n\r\n// export const { addToCart, removeFromCart, incrementQuantity, decrementQuantity } = cartSlice.actions;\r\n\r\n// export default cartSlice.reducer;\r\n\r\n// src/redux/cartSlice.js\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\n// Helper functions\r\nconst loadFromLocalStorage = () => {\r\n  const savedCart = localStorage.getItem('cart');\r\n  return savedCart ? JSON.parse(savedCart) : { items: [], totalPrice: 0 };\r\n};\r\n\r\nconst saveToLocalStorage = (state) => {\r\n  localStorage.setItem('cart', JSON.stringify(state));\r\n};\r\n\r\n// Initial state with items and totalPrice\r\nconst initialState = loadFromLocalStorage();\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n    addToCart: (state, action) => {\r\n      const existingItem = state.items.find((item) => item.id === action.payload.id);\r\n      if (existingItem) {\r\n        existingItem.quantity += 1;\r\n      } else {\r\n        state.items.push({ ...action.payload, quantity: 1 });\r\n      }\r\n      state.totalPrice += action.payload.price; // Update total price\r\n      saveToLocalStorage(state); // Save updated state to localStorage\r\n    },\r\n    removeFromCart: (state, action) => {\r\n      const updatedState = state.items.filter((item) => item.id !== action.payload.id);\r\n      state.totalPrice -= action.payload.price * action.payload.quantity; // Adjust the total price\r\n      state.items = updatedState;\r\n      saveToLocalStorage(state); // Save updated state to localStorage\r\n    },\r\n    incrementQuantity: (state, action) => {\r\n      const item = state.items.find((item) => item.id === action.payload.id);\r\n      if (item) {\r\n        item.quantity += 1;\r\n        state.totalPrice += item.price; // Update total price\r\n        saveToLocalStorage(state); // Save updated state to localStorage\r\n      }\r\n    },\r\n    decrementQuantity: (state, action) => {\r\n      const item = state.items.find((item) => item.id === action.payload.id);\r\n      if (item && item.quantity > 1) {\r\n        item.quantity -= 1;\r\n        state.totalPrice -= item.price; // Update total price\r\n        saveToLocalStorage(state); // Save updated state to localStorage\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addToCart, removeFromCart, incrementQuantity, decrementQuantity } = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}